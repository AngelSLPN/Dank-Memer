const app = require('express')();
const fs  = require('fs');

const endpoints = {};
const stats = {
    requests: 0,
    cmds: {}
}

fs.readdir('./assets/', (err, files) => {
    files.forEach(file => {
        file = file.replace('.js', '');
        try {
            endpoints[file] = require(`./assets/${file}`).run;
        } catch(e) {
            console.warn(`[ERR] Failed to load resource ${file}`);
        }
    });
});

app.get('/api/*', async (req, res) => {
    stats.requests++;
    let keys = require('./keys.json');
    delete require.cache[require.resolve('./keys.json')];
    if (!req.headers['api-key']))
        return res.status(401).send('<h1>401 - Unauthorized</h1><br>You are not authorized to access this endpoint.');

    const endpoint = req.originalUrl.slice(req.originalUrl.lastIndexOf('/') + 1);
    if (!endpoints[endpoint])
        return res.status(404).send('<h1>404 - Not Found</h1><br>Endpoint not found.')

    if (!stats.cmds[endpoint])
        stats.cmds[endpoint] = 0;
    stats.cmds[endpoint]++;
    const data = await endpoints[endpoint](req.headers['data-src'])
    .catch(err => {
        res.status(400).send(err.message);
    });

    res.status(200).send(data); // Returns image as buffer of bytes

});

app.get('/', (req, res) => {
    res.status(200).send(`<h1>API Statistics<h1><br>Uptime: ${formatTime(process.uptime())}<br>RAM Usage: ${(process.memoryUsage().rss / 1024 / 1024).toFixed(2)} MB<br>Requests: ${stats.requests}<br><br><h2>Endpoint Usage Breakdown</h2><br>${Object.keys(stats.cmds).map(c => `${c}: ${stats.cmds[c]}`).join('<br>')}`);
});

app.get('/favicon.ico', (req, res) => {
    res.sendFile(__dirname + '/favicon.ico');
});

app.listen('80', console.log('Server ready.'));


function formatTime(time) {
    let days    = Math.floor(time % 31536000 / 86400),
        hours   = Math.floor(time % 31536000 % 86400 / 3600),
        minutes = Math.floor(time % 31536000 % 86400 % 3600 / 60),
        seconds = Math.round(time % 31536000 % 86400 % 3600 % 60);
    days    = days    > 9 ? days    : "0" + days
    hours   = hours   > 9 ? hours   : "0" + hours
    minutes = minutes > 9 ? minutes : "0" + minutes
    seconds = seconds > 9 ? seconds : "0" + seconds
    return `${days > 0 ? `${days}:` : ``}${(hours || days) > 0 ? `${hours}:` : ``}${minutes}:${seconds}`
}
